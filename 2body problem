%matplotlib qt

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from mpl_toolkits.mplot3d import Axes3D
 
import matplotlib as mpl
import matplotlib.animation as anim 
mpl.rcParams['figure.dpi'] = 300



#probleme des deux corps 
G=6.67*10**-20
#conditions objet 1
m1=10**26
r1=np.array([0,0,0])
v1=np.array([5,10,15])
#condition masse 2:
m2=10**26
r2=np.array([3000,100,100])
v2=np.array([10,20,30])
r0=np.concatenate((r1,r2))
v0=np.concatenate((v1,v2))
S0=np.concatenate((r0,v0))
a,b=S0[0:3],S0[3:6]
c=np.linalg.norm(a-b)
def twobpro(t,S,m1,m2):
    # R1=S[:3]
    R1=np.array([S[0],S[1],S[2]])
    R2=S[3:6]
    r=np.linalg.norm(R1-R2)
    v=S[6:12]
    dvx1=G*m2*(R2[0]-R1[0])/(r**3)
    dvx2=G*m1*(R1[0]-R2[0])/(r**3)
    dvy1=G*m2*(R2[1]-R1[1])/(r**3)
    dvy2=G*m1*(R1[1]-R2[1])/(r**3)
    dvz1=G*m2*(R2[2]-R1[2])/(r**3)
    dvz2=G*m1*(R1[2]-R2[2])/(r**3)
    dv1=np.array([dvx1,dvy1,dvz1])
    dv2=np.array([dvx2,dvy2,dvz2])
    dv=np.concatenate((dv1,dv2))
    return np.concatenate((v,dv))
    
t=np.linspace(0,480,2000)
sol=odeint(twobpro,S0,t=t,tfirst=True,args=(m1,m2))

def func(num, dataSet,dataSet1,line,line1):
    # NOTE: there is no .set_data() for 3 dim data...
    line.set_data(dataSet[0:2, :num])    
    line.set_3d_properties(dataSet[2, :num])
    line1.set_data(dataSet1[0:2, :num])    
    line1.set_3d_properties(dataSet1[2, :num])
         
    return line,line1
# ax = plt.axes(projection='3d')
x1=sol.T[0]
y1=sol.T[1]
z1=sol.T[2]
x2=sol.T[3]
y2=sol.T[4]
z2=sol.T[5]
# ax.plot3D(x1,y1,z1)
# ax.plot3D(x2,y2,z2)
dataSet=np.array([x1,y1,z1])
dataSet1=np.array([x2,y2,z2])
fig = plt.figure()
ax = Axes3D(fig)
numDataPoints = len(t)
line = plt.plot(dataSet[0], dataSet[1], dataSet[2], lw=2, c='g')[0]
line1= plt.plot(dataSet1[0],dataSet1[1],dataSet1[2],lw=2,c="r")[0]
line_ani = anim.FuncAnimation(fig, func, frames=numDataPoints, fargs=(dataSet,dataSet1,line,line1), interval=1, blit=False)
